fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: bool;
    let mut _3: i32;
    let mut _4: (i32, bool);
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = const 0_i32;
        goto -> bb1;
    }

    bb1: {
        _1 = (copy _1, copy _1);
        _3 = copy _1;
        _2 = Lt(move _3, const 10_i32);
        switchInt(move _2) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _4 = AddWithOverflow(copy _1, const 1_i32);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _1, const 1_i32) -> [success: bb3, unwind continue];
    }

    bb3: {
        _1 = move (_4.0: i32);
        goto -> bb1;
    }

    bb4: {
        return;
    }
}
