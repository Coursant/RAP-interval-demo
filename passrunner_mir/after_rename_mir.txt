fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: bool;
    let mut _3: i32;
    let mut _6: bool;
    let mut _7: i32;
    let mut _8: i32;
    let mut _9: (i32, bool);
    let mut _10: (i32, bool);
    let mut _11: (i32, bool);
    scope 1 {
        debug k => _1;
        let mut _4: i32;
        scope 2 {
            debug i => _4;
            let mut _5: i32;
            scope 3 {
                debug j => _5;
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        goto -> bb1;
    }

    bb1: {
        _12 = SSAstmt;
        _13 = SSAstmt;
        _14 = SSAstmt;
        _3 = copy _14;
        _2 = Lt(move _3, const 100_i32);
        switchInt(move _2) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        _15 = ESSAstmt;
        _4 = const 0_i32;
        _5 = copy _15;
        goto -> bb3;
    }

    bb3: {
        _16 = SSAstmt;
        _17 = SSAstmt;
        _7 = copy _17;
        _8 = copy _16;
        _6 = Lt(move _7, move _8);
        switchInt(move _6) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _18 = ESSAstmt;
        _19 = ESSAstmt;
        _9 = AddWithOverflow(copy _19, const 1_i32);
        assert(!move _9, "attempt to compute `{} + {}`, which would overflow", copy _4, const 1_i32) -> [success: bb5, unwind continue];
    }

    bb5: {
        _20 = move _9;
        _10 = SubWithOverflow(copy _18, const 1_i32);
        assert(!move _10, "attempt to compute `{} - {}`, which would overflow", copy _5, const 1_i32) -> [success: bb6, unwind continue];
    }

    bb6: {
        _21 = move _10;
        goto -> bb3;
    }

    bb7: {
        _22 = ESSAstmt;
        _23 = ESSAstmt;
        _11 = AddWithOverflow(copy _15, const 1_i32);
        assert(!move _11, "attempt to compute `{} + {}`, which would overflow", copy _1, const 1_i32) -> [success: bb8, unwind continue];
    }

    bb8: {
        _24 = move _11;
        goto -> bb1;
    }

    bb9: {
        _25 = ESSAstmt;
        return;
    }
}
